version: '3.8'

services:
  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/alert_rules.yml:/etc/prometheus/alert_rules.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - aiops-network
    restart: unless-stopped

  # AlertManager for alert routing
  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    networks:
      - aiops-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - aiops-network
    restart: unless-stopped

  # AIOps Processor - Your custom app
  aiops-processor:
    build: ./aiops-processor
    container_name: aiops-processor
    ports:
      - "8000:8000"
    volumes:
      - ./aiops-processor:/app
    environment:
      # Monitoring Services
      - PROMETHEUS_URL=http://prometheus:9090
      - LOKI_URL=http://loki:3100
      
      # Huawei Cloud DeepSeek API Configuration (Competition)
      # API Endpoint - Fixed for competition
      - HUAWEI_API_URL=https://pangu.ap-southeast-1.myhuaweicloud.com/api/v2/chat/completions
      # API Key - Set your competition API key here or in .env file
      - HUAWEI_API_KEY=${HUAWEI_API_KEY:-your_huawei_api_key_here}
      # Model Selection:
      #   - deepseek-r1-distil-qwen-32b_raziqt (32B - More powerful, slower)
      #   - distill-llama-8b_46e6iu (8B - Faster, lighter)
      - HUAWEI_MODEL_NAME=${HUAWEI_MODEL_NAME:-deepseek-r1-distil-qwen-32b_raziqt}
      
      # Analysis Configuration
      - TIME_WINDOW_MINUTES=15
      - MAX_LOG_LINES=500
      - MAX_METRICS_POINTS=100
      
      # LLM Configuration
      # Increased timeout for large models (can be slow)
      - LLM_TIMEOUT=180
      - LLM_TEMPERATURE=0.3
      - LLM_MAX_TOKENS=2000
      - LLM_TOP_P=0.9
      - LLM_TOP_K=40
      
      # API Server Configuration
      - API_HOST=0.0.0.0
      - API_PORT=8000
      
      # Optional: Notification Configuration
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL:-}
      - GENERIC_WEBHOOK_URL=${GENERIC_WEBHOOK_URL:-}
    depends_on:
      prometheus:
        condition: service_started
      loki:
        condition: service_healthy
    networks:
      - aiops-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Loki for log aggregation (optional but recommended)
  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - ./loki/loki-config.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - aiops-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Promtail for log shipping to Loki
  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    volumes:
      - /var/log:/var/log:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./loki/promtail-config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    networks:
      - aiops-network
    restart: unless-stopped

  # Node Exporter for system metrics (for testing alerts)
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - "9100:9100"
    networks:
      - aiops-network
    restart: unless-stopped

volumes:
  prometheus_data:
  alertmanager_data:
  grafana_data:
  loki_data:

networks:
  aiops-network:
    driver: bridge
